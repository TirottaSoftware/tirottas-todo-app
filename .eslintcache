[{"C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\index.js":"1","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\Home.js":"2","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\Settings.js":"3","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\LoginForm.js":"4","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\App.js":"5","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\Todo.js":"6"},{"size":678,"mtime":1606144596223,"results":"7","hashOfConfig":"8"},{"size":5454,"mtime":1606999522888,"results":"9","hashOfConfig":"8"},{"size":6832,"mtime":1607000250581,"results":"10","hashOfConfig":"8"},{"size":5743,"mtime":1606996258179,"results":"11","hashOfConfig":"8"},{"size":518,"mtime":1606658813414,"results":"12","hashOfConfig":"8"},{"size":1040,"mtime":1606655533806,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"yw8dkx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\index.js",[],["30","31"],"C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\Home.js",["32"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\r\nimport Todo from './Todo'\r\nimport './home.css';\r\n\r\nexport default function HomePage() {\r\n  const auth = firebase.auth();\r\n  const db = firebase.firestore();\r\n  const history = useHistory();\r\n  const [todoItem, setTodoItem] = useState(\"\");\r\n  const [userTodos, setUserTodos] = useState([]);\r\n  const [sidebarTranslate, setSidebarTranslate] = useState(false);\r\n\r\n  const userTodosRef = [];\r\n  useEffect(() => {\r\n    async function setTodos() {\r\n      const snapshot = await db\r\n        .collection(\"users\")\r\n        .doc(auth.currentUser.uid)\r\n        .collection(\"todos\")\r\n        .get();\r\n      snapshot.forEach((doc) =>\r\n        userTodosRef.push({ id: doc.id, description: doc.data().description, completed: doc.data().completed })\r\n      );\r\n      setUserTodos(userTodosRef);\r\n    }\r\n    return setTodos();\r\n  }, [userTodos]);\r\n\r\n  const handleInputChange = (e) => {\r\n    e.preventDefault();\r\n    setTodoItem(e.target.value);\r\n  };\r\n\r\n  const addTodo = (e) => {\r\n    e.preventDefault();\r\n    db.collection(\"users\")\r\n      .doc(auth.currentUser.uid)\r\n      .collection(\"todos\")\r\n      .add({ description: todoItem });\r\n\r\n    setTodoItem(\"\");\r\n  };\r\n\r\n  const signUserOut = () => {\r\n    auth.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  async function removeTodos() {\r\n    const snapshot = await db.collection(\"users\").doc(auth.currentUser.uid)\r\n      .collection(\"todos\").get();\r\n    snapshot.forEach(doc => {\r\n      db.collection(\"users\").doc(auth.currentUser.uid)\r\n        .collection(\"todos\").doc(doc.id).delete()\r\n    })\r\n  };\r\n\r\n  async function completeTodos() {\r\n    const snapshot = await db.collection(\"users\").doc(auth.currentUser.uid)\r\n      .collection(\"todos\").get();\r\n    snapshot.forEach(doc => {\r\n      db.collection(\"users\").doc(auth.currentUser.uid)\r\n        .collection(\"todos\").doc(doc.id).update({\r\n          description: doc.data().description,\r\n          completed: true\r\n        })\r\n    })\r\n  };\r\n\r\n  async function removeCompleted() {\r\n    const snapshot = await db.collection(\"users\").doc(auth.currentUser.uid)\r\n      .collection(\"todos\").get();\r\n    snapshot.forEach(doc => {\r\n      if (doc.data().completed) {\r\n        db.collection(\"users\").doc(auth.currentUser.uid)\r\n          .collection(\"todos\").doc(doc.id).delete()\r\n      }\r\n    })\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {auth.currentUser === null ? (\r\n        <Redirect to=\"/\" />\r\n      ) : (\r\n          <div className=\"home\">\r\n\r\n            <div className={sidebarTranslate ? \"sidebar sidebar-translated\" : \"sidebar\"}>\r\n              <div className=\"profile-pic\">\r\n                <img src={auth.currentUser.photoURL} alt=\"profile pic\" />\r\n              </div>\r\n              <h2>Welcome back,</h2>\r\n              <h4>{auth.currentUser.displayName}</h4>\r\n              <div className=\"nav-links\">\r\n                <li>\r\n                  <Link to=\"/home\">\r\n                    Todo List\r\n                  </Link></li>\r\n                <li>\r\n                  <Link to=\"/home/settings\">\r\n                    Settings\r\n                  </Link>\r\n                </li>\r\n                <button id=\"btn-logout\" onClick={() => signUserOut()}>logout</button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"todo-list\">\r\n              <div className=\"burger\" onClick={() => setSidebarTranslate(!sidebarTranslate)}>\r\n                <div className=\"burger-line\"></div>\r\n                <div className=\"burger-line\"></div>\r\n                <div className=\"burger-line\"></div>\r\n              </div>\r\n              <h1>{auth.currentUser.displayName}'s todo list</h1>\r\n              <form>\r\n                <input type=\"text\" onChange={handleInputChange} value={todoItem} />\r\n                <input id=\"btn-add\" type=\"submit\" onClick={addTodo} disabled={!todoItem} value=\"Add todo\" />\r\n              </form>\r\n              <div className=\"todos-container\">\r\n                <div className=\"todos\">\r\n                  {userTodos &&\r\n                    userTodos.map((todo) => (\r\n                      <Todo todo={todo} />\r\n                    ))}\r\n                </div>\r\n                <div className=\"todo-buttons\">\r\n                  <button onClick={() => completeTodos()} className=\"btn-todo\">Complete All</button>\r\n                  <button onClick={() => removeTodos()} className=\"btn-todo\">Remove All</button>\r\n                  <button onClick={() => removeCompleted()} className=\"btn-todo\">Remove Completed</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* <h1>Hello from Home component</h1>\r\n          <p>Logged in as: {auth.currentUser.email}</p>\r\n          <form>\r\n            <input type=\"text\" onChange={handleInputChange} value={todoItem} />\r\n            <input type=\"submit\" onClick={addTodo} value=\"Add todo\" />\r\n          </form>\r\n          <button onClick={() => console.log(userTodos)}>log user todos</button>\r\n          <div className=\"todos\">\r\n            {userTodos &&\r\n              userTodos.map((todo) => (\r\n                <li key={Math.random() * 100}>\r\n                  {todo}\r\n                  <button onClick={() => removeTodo(todo)}>R</button>\r\n                </li>\r\n              ))}\r\n          </div>\r\n          <button onClick={() => signUserOut()}>Sign Out</button> */}\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\Settings.js",["33","34","35","36","37","38"],"import React, { useState } from 'react'\r\nimport { Link, useHistory, Redirect } from 'react-router-dom'\r\nimport Modal from 'react-modal';\r\nimport \"./home.css\";\r\nimport firebase from 'firebase';\r\n\r\nfunction Settings() {\r\n    const auth = firebase.auth();\r\n    const db = firebase.firestore();\r\n    const history = useHistory();\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\r\n    const [photoURL, setphotoURL] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [sidebarTranslate, setSidebarTranslate] = useState(false);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [usernameConfirmation, setUsernameConfirmation] = useState(\"\");\r\n\r\n    const signUserOut = () => {\r\n        auth.signOut();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const saveChanges = (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            if (password === passwordConfirm) {\r\n                if (password != \"\") {\r\n                    auth.currentUser.updatePassword(password);\r\n                }\r\n                if (photoURL != \"\") {\r\n                    auth.currentUser.updateProfile({\r\n                        displayName: auth.currentUser.displayName,\r\n                        photoURL: photoURL\r\n                    })\r\n                }\r\n                if (username != \"\") {\r\n                    auth.currentUser.updateProfile({\r\n                        displayName: username,\r\n                        photoURL: auth.currentUser.photoURL\r\n                    })\r\n                }\r\n                if (email != \"\") {\r\n                    auth.currentUser.updateEmail(email)\r\n                    history.push(\"/\");\r\n                }\r\n            }\r\n            else {\r\n                return setErrorMessage(\"Passwords do not match\");\r\n            }\r\n        } catch (error) {\r\n            return setErrorMessage(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {auth.currentUser === null ? (\r\n                <Redirect to=\"/\" />\r\n            ) : (\r\n                    <div>\r\n                        <div className=\"burger\" onClick={() => setSidebarTranslate(!sidebarTranslate)}>\r\n                            <div className=\"burger-line\"></div>\r\n                            <div className=\"burger-line\"></div>\r\n                            <div className=\"burger-line\"></div>\r\n                        </div>\r\n                        <div className={sidebarTranslate ? \"sidebar sidebar-translated\" : \"sidebar\"}>\r\n                            <div className=\"profile-pic\">\r\n                                <img src={auth.currentUser.photoURL} alt=\"profile pic\" />\r\n                            </div>\r\n                            <h2>Welcome back,</h2>\r\n                            <h4>{auth.currentUser.displayName}</h4>\r\n                            <div className=\"nav-links\">\r\n                                <li>\r\n                                    <Link to=\"/home\">\r\n                                        Todo List\r\n                  </Link></li>\r\n                                <li>\r\n                                    <Link to=\"/home/settings\">\r\n                                        Settings\r\n                  </Link>\r\n                                </li>\r\n                                <button id=\"btn-logout\" onClick={() => signUserOut()}>logout</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"settings-container\">\r\n                            <h1>Account Settings</h1>\r\n\r\n                            <h6>Change Username</h6>\r\n\r\n                            <input type=\"text\" placeholder=\"new username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n\r\n                            <h6>Change Password</h6>\r\n                            <input type=\"password\" placeholder=\"new password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                            <input id=\"confirm-password\" type=\"password\" placeholder=\"confirm new password\" value={passwordConfirm} onChange={(e) => setPasswordConfirm(e.target.value)} />\r\n\r\n                            <h6>Change E-mail</h6>\r\n                            <input type=\"text\" placeholder=\"new e-mail\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n\r\n                            <h6>Profile picture</h6>\r\n                            <input type=\"text\" placeholder=\"profile picture URL\" value={photoURL} onChange={(e) => setphotoURL(e.target.value)} />\r\n\r\n                            <h6>Danger zone</h6>\r\n                            <div className=\"danger-zone\">\r\n                                <p>Delete your account</p>\r\n                                <button onClick={() => setModalOpen(true)}>Delete</button>\r\n                            </div>\r\n                            <Modal\r\n                                className=\"modal\"\r\n                                isOpen={modalOpen}\r\n                                onRequestClose={() => setModalOpen(false)}\r\n                            >\r\n                                <div className=\"modal-delete\">\r\n                                    <h2>delete account</h2>\r\n                                    <p><strong>Warning!</strong>This action is irreversible. </p>\r\n                                    <p>Please write down your username in order to proceed</p>\r\n                                    <input value={usernameConfirmation} onChange={(e) => setUsernameConfirmation(e.target.value)} type=\"text\" />\r\n                                    <div className=\"confirm-delete\">\r\n                                        <button onClick={() => setModalOpen(false)}>Back</button>\r\n                                        <button onClick={() => {\r\n                                            auth.currentUser.delete();\r\n                                            history.push(\"/\")\r\n                                        }} disabled={usernameConfirmation != auth.currentUser.displayName} id=\"btn-delete\">Delete</button>\r\n                                    </div>\r\n                                </div>\r\n                            </Modal>\r\n                            {errorMessage ? <p className=\"error-message\">{errorMessage}</p> : null}\r\n                            <button id=\"btn-save\" onClick={saveChanges}>Apply</button>\r\n                            <div className=\"note\">\r\n                                <p><strong>Note: </strong>Only one change may be applied at a time</p>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\LoginForm.js",["39","40","41"],"import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport \"./login.css\";\r\n\r\n//auth.SignOut()\r\n//auth.OnAuthStateChanged(() =>{})\r\n\r\nconst LoginForm = () => {\r\n  const auth = firebase.auth();\r\n  const db = firebase.firestore();\r\n\r\n  const [loginEmail, setLoginEmail] = useState(\"\");\r\n  const [loginPassword, setLoginPassword] = useState(\"\");\r\n\r\n  const [signupEmail, setSignupEmail] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [signupPassword, setSignupPassword] = useState(\"\");\r\n  const [confirmSignupPassword, setConfirmPasswordValue] = useState(\"\");\r\n\r\n  const [loginError, setLoginMessage] = useState(\"\");\r\n  const [signupError, setSignupMessage] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  // auth.onAuthStateChanged((user) => {\r\n  //   if (user) {\r\n  //     console.log(user);\r\n  //   } else {\r\n  //     console.log(\"no current user\");\r\n  //   }\r\n  // });\r\n\r\n  const handleLoginChange = (e) => {\r\n    if (e.target.name === \"emailInput\") {\r\n      setLoginEmail(e.target.value);\r\n    } else if (e.target.name === \"passwordInput\") {\r\n      setLoginPassword(e.target.value);\r\n    }\r\n  };\r\n  const handleSignupChange = (e) => {\r\n    if (e.target.name === \"emailInput\") {\r\n      setSignupEmail(e.target.value);\r\n    } else if (e.target.name === \"passwordInput\") {\r\n      setSignupPassword(e.target.value);\r\n    }\r\n    else if (e.target.name === \"confirmPasswordInput\") {\r\n      setConfirmPasswordValue(e.target.value);\r\n    }\r\n    else if (e.target.name === \"username\") {\r\n      setUsername(e.target.value);\r\n    }\r\n  };\r\n\r\n  const signUpUser = (e) => {\r\n\r\n    if (username === \"\") {\r\n      return setSignupMessage(\"Please provide a username\")\r\n    }\r\n    if (signupPassword != confirmSignupPassword) {\r\n      return setSignupMessage(\"Passwords do not match\")\r\n    }\r\n\r\n    auth\r\n      .createUserWithEmailAndPassword(signupEmail, signupPassword)\r\n      .then((cred) => {\r\n        db\r\n          .collection(\"users\")\r\n          .doc(cred.user.uid)\r\n          .collection(\"todos\")\r\n          .add({ description: \"Start adding todos...\", completed: false })\r\n\r\n        cred.user.updateProfile({ displayName: username, photoURL: \"https://st3.depositphotos.com/4111759/13425/v/600/depositphotos_134255626-stock-illustration-avatar-male-profile-gray-person.jpg\" });\r\n      }\r\n      )\r\n      .then(() => {\r\n        auth.signInWithEmailAndPassword(signupEmail, signupPassword);\r\n        history.push(\"/home\");\r\n      })\r\n      .catch((error) => {\r\n        setSignupMessage(error.message);\r\n      });\r\n    setSignupEmail(\"\");\r\n    setUsername(\"\");\r\n    setSignupPassword(\"\");\r\n    setConfirmPasswordValue(\"\");\r\n  };\r\n\r\n  const loginUser = (e) => {\r\n    auth.setPersistence(firebase.auth.Auth.Persistence.SESSION)\r\n      .then(function () {\r\n        // Existing and future Auth states are now persisted in the current\r\n        // session only. Closing the window would clear any existing state even\r\n        // if a user forgets to sign out.\r\n        // ...\r\n        // New sign-in will be persisted with session persistence.\r\n        return auth.signInWithEmailAndPassword(loginEmail, loginPassword).then(() => history.push(\"/home\"))\r\n          .catch((error) => {\r\n            setLoginEmail(\"\");\r\n            setLoginPassword(\"\");\r\n            return setLoginMessage(\"Invalid Credentials. Please try again\");\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        setLoginMessage(error)\r\n      });\r\n\r\n    // auth\r\n    //   .signInWithEmailAndPassword(loginEmail, loginPassword)\r\n    //   .then(() => history.push(\"/home\"))\r\n    //   .catch((error) => {\r\n    //     return setLoginMessage(\"Invalid Credentials. Please try again\");\r\n    //   });\r\n    // setLoginEmail(\"\");\r\n    // setLoginPassword(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"title\">Tirotta's Todo App</h1>\r\n      <div className=\"login-container\">\r\n        <div className=\"login-form\">\r\n          <h1>Log In</h1>\r\n          <input\r\n            name=\"emailInput\"\r\n            onChange={handleLoginChange}\r\n            type=\"email\"\r\n            placeholder=\"E-mail\"\r\n            value={loginEmail}\r\n          />\r\n          <input\r\n            name=\"passwordInput\"\r\n            onChange={handleLoginChange}\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={loginPassword}\r\n          />\r\n          <button id=\"btn-login\" onClick={loginUser}>\r\n            Log in\r\n        </button>\r\n          <p id=\"error-message\">{loginError && loginError}</p>\r\n        </div>\r\n        <div className=\"signup-form\">\r\n          <h1>Sign Up</h1>\r\n          <input\r\n            name=\"emailInput\"\r\n            onChange={handleSignupChange}\r\n            type=\"email\"\r\n            placeholder=\"E-mail\"\r\n            value={signupEmail}\r\n          />\r\n          <input\r\n            name=\"username\"\r\n            onChange={handleSignupChange}\r\n            type=\"text\"\r\n            placeholder=\"Username\"\r\n            value={username}\r\n          />\r\n          <input\r\n            name=\"passwordInput\"\r\n            onChange={handleSignupChange}\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            value={signupPassword}\r\n          />\r\n          <input\r\n            name=\"confirmPasswordInput\"\r\n            onChange={handleSignupChange}\r\n            type=\"password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmSignupPassword}\r\n          />\r\n          <button id=\"btn-signup\" onClick={signUpUser}>\r\n            Sign up\r\n        </button>\r\n          <p id=\"error-message\">{signupError && signupError}</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default LoginForm;\r\n","C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\App.js",[],"C:\\Users\\crist\\Desktop\\Documents\\Coding\\React\\auth-practice\\src\\components\\Todo.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":29,"column":6,"nodeType":"48","endLine":29,"endColumn":17,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":9,"column":11,"nodeType":"52","messageId":"53","endLine":9,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":31,"column":30,"nodeType":"56","messageId":"57","endLine":31,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":34,"column":30,"nodeType":"56","messageId":"57","endLine":34,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":40,"column":30,"nodeType":"56","messageId":"57","endLine":40,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":46,"column":27,"nodeType":"56","messageId":"57","endLine":46,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":126,"column":75,"nodeType":"56","messageId":"57","endLine":126,"endColumn":77},{"ruleId":"50","severity":1,"message":"58","line":1,"column":27,"nodeType":"52","messageId":"53","endLine":1,"endColumn":36},{"ruleId":"50","severity":1,"message":"59","line":3,"column":10,"nodeType":"52","messageId":"53","endLine":3,"endColumn":14},{"ruleId":"54","severity":1,"message":"55","line":59,"column":24,"nodeType":"56","messageId":"57","endLine":59,"endColumn":26},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth.currentUser.uid', 'db', and 'userTodosRef'. Either include them or remove the dependency array.","ArrayExpression",["62"],"no-unused-vars","'db' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [auth.currentUser.uid, db, userTodos, userTodosRef]",{"range":"65","text":"66"},[967,978],"[auth.currentUser.uid, db, userTodos, userTodosRef]"]